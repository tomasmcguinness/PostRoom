@model System.Int64
<style type="text/css">
    .typeahead {
        z-index: 999999;
    }
</style>
<h2>Post
 <a href="#recordDeliveryModal" role="button" class="btn" data-toggle="modal" style="float: right; margin-left: 5px;">
     <i class="icon-plus"></i>
     Record Delivery</a>

    <a href="#" class="btn" style="float: right; margin-left: 5px;" data-bind="click: refreshPost"><i class="icon-refresh"></i>
    </a>
    @*<button class="btn" style="float: right;"><i class="icon-minus"></i>Record Collection</button>*@
</h2>
<hr />
<div style="width: 150px; margin-left: auto; margin-right: auto; text-align: center;" data-bind="visible: isLoading">
    <i class="icon-spinner icon-spin icon-4x"></i>
    <br />
    LOADING
</div>
<div class="accordion" id="accordion2" data-bind="foreach: buildings">
    <div class="accordion-group">
        <div class="accordion-heading">
            <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapse" data-bind="click: loadApartments">
                <span data-bind="text: name"></span>
                <span class="badge badge-info" style="float: right;" data-bind="text: totalPackages"><i class="icon-spinner icon-spin"></i></span>
            </a>
        </div>
        <div class="accordion-body" data-bind="css: { collapse: showApartments() === false }">
            <div class="accordion-inner">
                <div data-bind="visible: loadingApartments">
                    <i class="icon-spinner icon-spin"></i>&nbsp;Loading Apartment List...
                </div>
                <table class="table table-bordered" data-bind="visible: loadingApartments() === false">
                    <tbody data-bind="foreach: apartments">
                        <tr>
                            <td style="vertical-align: middle;">
                                <span data-bind="text: friendlyName"></span>
                                <button class="btn btn-small" style="float: right;" data-bind="click: showUpdateDialog">Update</button>
                                <span class="badge badge-info" style="float: right; margin-top: 5px; margin-right: 15px;" data-bind="text: deliveryCount, visible: deliveryCount() > 0"></span>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div id="recordDeliveryModal" class="modal hide" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-bind="with: recordDelivery">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
        <h3 id="myModalLabel">Record Delivery</h3>
    </div>
    <div class="modal-body">
        <p>Details of the delivery are captured here.</p>
        <label>Apartment</label>
        <input id="apartmentName" class="apartmentSearch" autocomplete="off" type="text" />
        <label>Recipient</label>
        <input type="text" data-bind="value: recipient" />
    </div>
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal" aria-hidden="true" data-bind="click: cancel">Cancel</button>
        <button class="btn btn-primary" data-bind="click: recordDelivery">Record</button>
    </div>
</div>

<div id="updateApartmentDeliveriesModal" class="modal hide" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-bind="with: selectedApartment">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
        <h3>Update Deliveries</h3>
        <h5 data-bind="text: friendlyName"></h5>
    </div>
    <div class="modal-body">
        <div data-bind="visible: isLoading">
            <i class="icon-spinner icon-spin"></i>Loading Packages...
        </div>
        <table class="table table-bordered" data-bind="visible: isLoading() === false && hasPackages()">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Name</th>
                    <th style="text-align: center;">Collected</th>
                </tr>
            </thead>
            <tbody data-bind="foreach: packages">
                <tr data-bind="css: { success: collected }">
                    <td><span data-bind="text: date"></span></td>
                    <td><span data-bind="text: recipient"></span></td>
                    <td style="text-align: center;">
                        <span data-bind="visible: isLoading">
                            <i class="icon-spinner icon-spin"></i></span>
                        <span data-bind="visible: isLoading() === false && collected()">
                            <i class="icon-ok"></i></span>
                        <button type="button" class="btn btn-small" data-bind="click: markPackagedAsCollected, visible: isLoading() === false && collected() === false">Collected</button>
                    </td>
                </tr>
            </tbody>
        </table>
        <div data-bind="visible: isLoading() === false && hasPackages() === false">
            There are no packages for collection at this time.
        </div>
    </div>
    <div class="modal-footer">
        <button class="btn btn-primary" data-bind="enable: hasUncollectedPackages">Mark All Collected</button>
        <button class="btn" data-dismiss="modal" aria-hidden="true" data-bind="click: close">Close</button>
    </div>
</div>

@section script
{
    <script type="text/javascript">

        var selectedApartmentId = null;
        var map = null;
        var states = null;
        var model = new postModel();

        function recordDeliveryModal() {
            var self = this;
            self.recipient = ko.observable();
            self.recordDelivery = function () {

                $.ajax({
                    type: "Post",
                    url: "@Url.Action("RecordDelivery")",
                    dataType: "json",
                    data: { apartmentId: selectedApartmentId, recipient: self.recipient() }
                }).done(function (data) {

                    model.refreshPost();
                    $("#recordDeliveryModal").modal("hide");

                    self.recipient("");
                });
            };

            self.cancel = function () {
                self.recipient("");
            };
        };

        function postModel() {
            var self = this;
            self.selectedApartment = ko.observable();
            self.isLoading = ko.observable();
            self.buildings = ko.observableArray();
            self.recordDelivery = new recordDeliveryModal();
            self.refreshPost = function () {

                for (var i = 0; i < self.buildings().length; i++) {
                    self.buildings()[i].showApartments(false);
                    self.buildings()[i].load();
                }

            };
            self.loadBuildings = function () {

                self.isLoading(true);

                $.ajax({
                    type: "Get",
                    url: "@Url.Action("Post", new { estateId = Model })",
                    dataType: "json"
                }).done(function (data) {

                    self.isLoading(false);
                    self.buildings.removeAll();

                    if (data == null) {
                        return;
                    }

                    for (var i = 0; i < data.length; i++) {
                        var building = new buildingModel();
                        building.buildingId(data[i].BuildingId);
                        building.name(data[i].Name);

                        self.buildings.push(building);

                        building.load();
                    }
                });
            };
        };

        function apartmentModel() {
            var self = this;

            self.apartmentId = ko.observable();
            self.number = ko.observable();
            self.friendlyName = ko.observable();
            self.deliveryCount = ko.observable();
            self.isLoading = ko.observable(false);
            self.showUpdateDialog = function () {
                model.selectedApartment(self);
                self.loadPackagesForCollection();
                $("#updateApartmentDeliveriesModal").modal();
            };

            self.packages = ko.observableArray();
            self.hasPackages = ko.computed(function () {
                return self.packages().length > 0;
            }, self);
            self.hasUncollectedPackages = ko.computed(function () {

                if (self.packages().length == 0) return false;

                for (var i = 0; i < self.packages().length; i++) {

                    if (self.packages()[i].collected())
                        return false;
                }

            }, self);
            self.close = function () {
                model.refreshPost();
            };
            self.loadPackagesForCollection = function () {

                self.isLoading(true);

                $.ajax({
                    type: "Get",
                    dataType: "json",
                    url: "@Url.Action("DeliveriesForApartment")",
                    data: { apartmentId: self.apartmentId() },
                }).done(function (data) {

                    self.isLoading(false);
                    self.packages.removeAll();

                    if (data == null) {
                        return;
                    }

                    for (var i = 0; i < data.length; i++) {
                        var model = new deliveryModel();
                        model.deliveryId(data[i].DeliveryId);
                        model.recipient(data[i].Name);
                        model.date(new Date(parseInt(data[i].Date.substr(6))));
                        self.packages.push(model);
                    }

                    self.isLoading(false);
                });
            };

            self.markAllPackagesCollection = function () {

            };
        };

        function deliveryModel() {
            var self = this;

            self.deliveryId = ko.observable();
            self.recipient = ko.observable();
            self.date = ko.observable();
            self.collected = ko.observable(false);
            self.isLoading = ko.observable(false);

            self.markPackagedAsCollected = function () {

                self.isLoading(true);

                $.ajax({
                    type: "Post",
                    url: "@Url.Action("MarkDeliveryAsCollected")",
                    data: { deliveryId: self.deliveryId() },
                    dataType: "json"
                }).done(function (data) {
                    self.isLoading(false);
                    self.collected(true);
                });
            }
        }

        function buildingModel() {
            var self = this;

            self.buildingId = ko.observable();
            self.name = ko.observable();
            self.totalPackages = ko.observable();
            self.showApartments = ko.observable(false);
            self.loadingApartments = ko.observable(false);
            self.apartments = ko.observableArray();

            self.load = function () {

                self.apartments.removeAll();

                $.ajax({
                    type: "Get",
                    url: "@Url.Action("OutstandingPackagesForBuilding")",
                    data: { buildingId: self.buildingId() },
                    dataType: "json"
                }).done(function (data) {
                    self.totalPackages(data);
                });
            };

            self.loadApartments = function () {

                self.showApartments(!self.showApartments());

                if (self.showApartments()) {

                    if (self.apartments().length > 0) return;

                    self.loadingApartments(true);

                    $.ajax({
                        type: "Get",
                        url: "@Url.Action("Apartments")",
                        data: { buildingId: self.buildingId() },
                        dataType: "json"
                    }).done(function (data) {

                        for (var i = 0; i < data.length; i++) {
                            var apartment = new apartmentModel();

                            apartment.apartmentId(data[i].ApartmentId);
                            apartment.deliveryCount(data[i].DeliveryCount);
                            apartment.friendlyName(data[i].FriendlyName);

                            self.apartments.push(apartment);
                        }

                        self.loadingApartments(false);
                    }).fail(function (req, message, error) {
                        alert("Failed to load apartments:" + error);
                    });
                }
            };
        };

        $().ready(function () {

            $(".apartmentSearch").typeahead({
                source: function (query, process) {

                    states = [];
                    map = {};

                    $.get("@Url.Action("SearchApartments", new { Controller = "Apartments" })", { query: query }, function (data) {

                        $.each(data, function (i, apartment) {
                            map[apartment.FriendlyName] = apartment;
                            states.push(apartment.FriendlyName);
                        });

                        return process(states);
                    });
                },
                updater: function (item) {
                    selectedApartmentId = map[item].ApartmentId;
                    return item;
                }
            });

            ko.applyBindings(model);
            model.loadBuildings();
        });
    </script>
}
